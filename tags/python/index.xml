<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on 一念博客</title><link>https://blog.saintic.com/tags/python.html</link><description>Recent content in python on 一念博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 16 Aug 2021 14:23:13 +0800</lastBuildDate><atom:link href="https://blog.saintic.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>xlwings操作Excel</title><link>https://blog.saintic.com/note/xlwings.html</link><pubDate>Mon, 16 Aug 2021 14:23:13 +0800</pubDate><guid>https://blog.saintic.com/note/xlwings.html</guid><description>笔记中python版本3.9，使用xlwings模块操作Excel。 概念 详细概念可以从引用文章-Python操作工作簿查看。 据我理解，App</description></item><item><title>10进制、64进制互相转换</title><link>https://blog.saintic.com/blog/304.html</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/304.html</guid><description>10 进制转为 62 进制网上有不少文章的，64 进制也就是多了 - _ 这种 10 进制转到高进制，常用在短网址缩短服务中，以下片段是之前 shorturl 跳转程序的部分 编码方法</description></item><item><title>开源了一个名叫picbed（sapic）的图床程序</title><link>https://blog.saintic.com/blog/279.html</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/279.html</guid><description>闲言碎语一直想弄个图床来着，然鹅又不想用公共图床，开源的一些自建图床程序基本是基于PHP、Java、Go，还有其他桌面版等，皆非我所愿，所以</description></item><item><title>Isso中文文档：自建Isso评论服务及其国内增强版功能介绍</title><link>https://blog.saintic.com/blog/275.html</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/275.html</guid><description>一、概述 GitHub：https://github.com/posativ/isso Pypi：https://pypi.org/projec</description></item><item><title>分享开发rtfd中的部分技巧</title><link>https://blog.saintic.com/blog/274.html</link><pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/274.html</guid><description>下面的代码可以在rtfd中找到源码，不过下方代码稍有更改。 1. 封装configparser模块 说明：解析ini格式的配置文件，对configp</description></item><item><title>Python-SecureHTTP - 基于RSA+AES的加密通信的代码实现</title><link>https://blog.saintic.com/blog/266.html</link><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/266.html</guid><description>说在前面： 在HTTP协议中，传输数据是明文，被第三方截获后很容易看出数据，所以现在主流建议是HTTPS加密传输，如Chrome，新版本用HT</description></item><item><title>redis不同实例间数据迁移</title><link>https://blog.saintic.com/blog/265.html</link><pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/265.html</guid><description>redis单机版数据迁移。 从一个实例迁移到另一个实例，使用于本机不同端口迁移备份、其他机器间迁移备份。 工具是一个简单的python脚本，指定</description></item><item><title>服务器命令审计功能</title><link>https://blog.saintic.com/blog/264.html</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/264.html</guid><description>运维中，我们有时候想要记录服务器上谁登录了、干了什么，前者可以使用之前的ssh登录报警这篇文章，后者则可以参考本文。 此功能利用的是histo</description></item><item><title>使用sphinx制作接口文档并托管到readthedocs</title><link>https://blog.saintic.com/blog/263.html</link><pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/263.html</guid><description>此sphinx可不是彼sphinx，此篇是指生成文档的工具，是python下最流行的文档生成工具，python官方文档即是它生成，官方网站是</description></item><item><title>python打包分发工具setuptools使用记录</title><link>https://blog.saintic.com/blog/262.html</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/262.html</guid><description>关于python setup.py文件的编写技巧 环境：最新版setuptools，初步认识setuptools可以参考这篇文章 1. 自定义命令 from setuptools</description></item><item><title>python使用zip压缩目录及相关问题</title><link>https://blog.saintic.com/blog/258.html</link><pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/258.html</guid><description>一、Python封装的使用zip压缩文件的代码(修正版)： 说明：这个函数只是针对性地压缩一个目录下所有文件，若使用，你可能需要再修改。 作用：</description></item><item><title>必应、百度收录查询接口</title><link>https://blog.saintic.com/blog/253.html</link><pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/253.html</guid><description>本站提供的百度、必应是否收录了URL的查询接口，详情访问：https://open.saintic.com/openapi#必应收录查询ht</description></item><item><title>开机自动下载必应今日图片并更换桌面壁纸</title><link>https://blog.saintic.com/blog/249.html</link><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/249.html</guid><description>零、简介 当你看腻了Windows桌面背景，觉得不够个性化，或者每次手动设置壁纸略感繁琐，或者找不到称心如意的背景图，那么你可以尝试使用这个小</description></item><item><title>torndb 常用操作和两种事务方式</title><link>https://blog.saintic.com/blog/247.html</link><pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/247.html</guid><description>本文转载自：http://hopehook.com/2017/02/19/torndb/ 如有转载，请与原作者联系！ # coding:utf8 import torndb # 建立连接 # 东8区</description></item><item><title>python对带前缀的版本号进行排序</title><link>https://blog.saintic.com/blog/244.html</link><pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/244.html</guid><description>如果有一个版本号的list： 如 version = ['2.0.1', '1.0.2', '1.0.21', '2,2.9', '1.2.11'] 要求：要对version大小进行排序，获得最大的版本号(2.2.9)。 思路：可以转换成数字型tu</description></item><item><title>分享python基于onetimepass的双因素身份验证(2FA)</title><link>https://blog.saintic.com/blog/242.html</link><pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/242.html</guid><description>基础认识 多因素身份验证（MFA）是一种计算机访问控制方法，在这种方法中，用户只有在成功向验证机制提交了几个单独的证据之后才被授予访问权限，通</description></item><item><title>Api接口签名验证(Flask)</title><link>https://blog.saintic.com/blog/241.html</link><pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/241.html</guid><description>前文 在使用Api场景的系统交互时，​使用API签名，即保证请求的数据正确性和接口安全，又能识别API调用者的身份。 以下以一种常见方式演示： 公</description></item><item><title>开放获取Bing每日背景图片接口</title><link>https://blog.saintic.com/blog/240.html</link><pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/240.html</guid><description>以下描述引用自https://oss.so/article/55 经过访问BING的网址最终发现，bing中文网一直在提供每日更新背景图片壁纸</description></item><item><title>python计算crontab下次执行时间与执行次数</title><link>https://blog.saintic.com/blog/238.html</link><pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/238.html</guid><description>使用Python计算Linux Crontab定时任务下次运行时间，直接上代码： #coding:utf8 import croniter, datetime, time def datetime_to_timestamp(timestring, format=&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;): &amp;#34;&amp;#34;&amp;#34; 将普通时间格式转换为时间戳(10位), 形如</description></item><item><title>ssh登录报警</title><link>https://blog.saintic.com/blog/234.html</link><pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/234.html</guid><description>如果你服务器被入侵了，该怎么做才能让自己第一时间知晓？ 答案很多，其中一个方法是ssh登陆后发送报警信息给相关人员。 ssh远程登陆自身是可以设</description></item><item><title>基于Flask的Web应用程序插件式结构开发</title><link>https://blog.saintic.com/blog/231.html</link><pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/231.html</guid><description>事实上，很多应用程序基于插件式结构开发，可以很方便了扩展软件的功能，并且这些功能完全可以依托于第三方开发者，只要提供好接口和完备文档，比如w</description></item><item><title>python生成指纹格式、MAC地址形式的字符串</title><link>https://blog.saintic.com/blog/219.html</link><pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/219.html</guid><description>先上代码： import random gen_fingerprint = lambda n=16,s=2: &amp;#34;:&amp;#34;.join([ &amp;#34;&amp;#34;.join(random.sample(&amp;#34;0123456789abcdef&amp;#34;,s)) for i in range(0, n) ]) n=16, s=2,默认指纹格式,返回结果类似： 47:6f:09:2f:bd:e7:d3:04:1c:7a:40</description></item><item><title>开源项目之SwarmOps</title><link>https://blog.saintic.com/blog/217.html</link><pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/217.html</guid><description>SwarmOps正式版终于来了！！ Docker使DevOps贴合亲近，官方自带的Swarm多主机调度系统，直接上手，简单粗暴，但是命令的使用</description></item><item><title>程序文档之SwarmOps</title><link>https://blog.saintic.com/blog/215.html</link><pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/215.html</guid><description>项目：SwarmOps 说明：Docker Swarm Mode(v1.12.0+)功能封装的API和UI(Flask+Bootstrap) GitHub：</description></item><item><title>百度站长平台主动推送(实时)接口Python示例</title><link>https://blog.saintic.com/blog/210.html</link><pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/210.html</guid><description>之前已经写过一篇文章，百度站长平台主动推送(实时)链接接口示例，讲述了用命令行curl的方式主动向百度推送我们的相关网址。 今天Interes</description></item><item><title>Python抓取花瓣网画板图片</title><link>https://blog.saintic.com/blog/204.html</link><pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/204.html</guid><description>注意：当前最新版本5.0，请移驾至底部。 JavaScript版抓取花瓣网、堆糖网，油猴脚本，更方便更快捷，有兴趣请移驾至 https://blog.saintic.com/blog/256.html ################################################################ 当前区域版本1.</description></item><item><title>Python自定义进程名</title><link>https://blog.saintic.com/blog/132.html</link><pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/132.html</guid><description>一般情况下，我们直接启动python程序后使用ps查看，显示的结果为pyton xxx.py，web类应用使用netstat或ss查看显示为p</description></item><item><title>multiprocessing.dummy多线程模块</title><link>https://blog.saintic.com/blog/105.html</link><pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/105.html</guid><description>multiprocessing.dummy replicates the API of multiprocessing but is no more than a wrapper around the threading module. 以上是python官方文档对multiprocessing.dummy的介绍。 简单地说，multiproc</description></item><item><title>RTBAsia真人概率值查询接口</title><link>https://blog.saintic.com/blog/103.html</link><pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/103.html</guid><description>RTBAsia真人概率值说明： 知识背景：互联网用户分为三个最大的“人群”：男，女，机器人；机器人会模仿人类的形态浏览网页、观赏视频、点击广告</description></item><item><title>Python获取系统信息(CPU、Mem、Disk、Network、User等)</title><link>https://blog.saintic.com/blog/86.html</link><pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/86.html</guid><description>#!/usr/bin/env python #coding:utf8 #get system info from psutil #required:psutil try: import sys,psutil,platform,commands,json,socket,os except ImportError as msg: print &amp;#34;Import Error, because %s&amp;#34; % msg sys.exit(1) class SysInfo(): sys_ip=socket.gethostbyname(socket.gethostname()) try: client_ip=os.environ[&amp;#39;SSH_CONNECTION&amp;#39;].split()[0] except: client_ip=&amp;#39;unknown&amp;#39; sys_version=platform.linux_distribution() sys_fqdn=platform.uname()[1] #hostname,eg:localhost.localdomain sys_kernel=platform.uname()[2] #kernel version sys_arch=platform.uname()[4] #eg:x86_64 amd64 win32 def hostname(self): return json.dumps({&amp;#34;Hostname&amp;#34;: self.sys_fqdn}) def ip(self): return json.dumps({&amp;#34;ServerIP&amp;#34;: self.sys_ip, &amp;#39;SSH_Client_IP&amp;#39;: self.client_ip}) def Kernel(self): return json.dumps({&amp;#34;Kernel&amp;#34;: self.sys_kernel}) def Arch(self): return json.dumps({&amp;#34;Arch&amp;#34;: self.sys_arch}) def Version(self): return json.dumps({&amp;#34;SysVersion&amp;#34;: self.sys_version}) def CPU(self):</description></item><item><title>服务存活性探测</title><link>https://blog.saintic.com/blog/93.html</link><pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.saintic.com/blog/93.html</guid><description>一个类似于telnet的python脚本。 #!/usr/bin/python #coding:utf-8 &amp;#39;&amp;#39;&amp;#39; 1.判断服务是否正常 2.判断机器是否存活 &amp;#39;&amp;#39;&amp;#39; import os,socket,subprocess,sys #把程序输出定位到/dev/null,否则会在</description></item></channel></rss>